# piper-backend/.github/workflows/ci.yml
name: CI Piper - Build & Push Docker Image

on:
  push:
    branches:
      - main # Déclenche le workflow à chaque push sur la branche 'main'
      - develop # Ou sur ta branche de développement
  pull_request:
    branches:
      - main
      - develop

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Utilise un runner Ubuntu hébergé par GitHub

    steps:
      - name: Checkout code # Étape 1: Récupère ton code depuis le dépôt GitHub
        uses: actions/checkout@v4

      - name: Set up Python # Étape 2: Configure Python (version 3.11, comme dans ton Dockerfile)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies # Étape 3: Installe les dépendances Python
        run: pip install -r requirements.txt

      - name: Run tests # Étape 4: Exécute tes tests (si tu en as).
        # Si tu n'as pas encore de tests Python, tu peux commenter cette ligne.
        # Mais il est fortement recommandé d'ajouter des tests pour ton API FastAPI.
        # Exemple: pytest
        # run: pytest
        run: echo "No Python tests configured yet." # Placeholder si tu n'as pas de tests

      - name: Log in to Docker Hub # Étape 5: Se connecte à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image # Étape 6: Construit et pousse l'image Docker
        uses: docker/build-push-action@v5
        with:
          context: . # Le contexte de construction est la racine du dépôt
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/piper-backend:latest # Le tag de ton image